---
title: "Data wrangling example"
format: html
editor: visual
---

### Read in packages

Use pacman to easily install and load the tidyverse (all tidyverse packages), palmerpenguins (example data that we'll us), and janitor (to clean table names)

```{r}
pacman::p_load(tidyverse, flextable,
               palmerpenguins, 
               janitor, magrittr) 
```

### Inspect data

```{r}

glimpse(penguins_raw)
```

### Why manipulate data in R?

-   Reproducible

-   Easy to update and re-use with new data

-   Less prone to human error

-   Can be quick, easy, and fun...

Here are some examples of how we can use the tidyverse packages (& janitor) to tidy, transform, and visualise the palmer penguins data:

##### Penguin morphometrics

```{r}
#| message: false
#| code-fold: true
#| fig-cap: "Sexual dimporphism in Palmer penguins"

vars_measurements <- c("culmen_length_mm", "culmen_depth_mm", "flipper_length_mm", "body_mass_g")

# use pipe operative from magrittr
penguins_example <- penguins_raw %>%
  # column names to snake_case using janitor package
  janitor::clean_names() %>% 
  # rename columns using dplyr
  rename(carbon = delta_13_c_o_oo,
         nitrogen = delta_15_n_o_oo) %>%
  # add new columns using dplyr
  mutate(
    # extract year using lubridate
    year = lubridate::year(date_egg), 
    # change case in sex column using stringr
    sex = str_to_lower(sex), 
    # take first element of species column string using stringr and purrr
    species = str_split(species, pattern = " ") %>% map(.,1) %>% unlist()) %>% 
  # remove nas in sex column using dplyr
  filter(!is.na(sex))

# plot data using ggplot
ggplot(penguins_example, aes(x = flipper_length_mm, y = body_mass_g, 
                             # reorder sex using forcats
                             col = fct_reorder2(sex, flipper_length_mm, body_mass_g))) +
  facet_grid(cols = vars(species), scales = "free")+
  geom_point()+
  geom_smooth(method = lm)+
  scale_colour_viridis_d(option = "magma", begin = 0.7, end = 0.3, name = "Sex")+
  theme_minimal()+
  theme(panel.border = element_rect(fill = NA))

```

##### Penguin isotope signatures

```{r}
#| warning: false
#| code-fold: true
#| fig-cap: "Isotope signatures among Palmer penguins"

penguins_summary_isotopes <- penguins_example %>% 
  # change data format to long using tidyr
  pivot_longer(cols = carbon:nitrogen, names_to = "isotope", values_to = "value") %>%
  # group data using dplyr
  group_by(species, isotope) %>% 
  # summarise data for each group using dplyr
  summarize(mean = mean(value, na.rm = T),
            sd =  sd(value, na.rm = T)) %>%
  # change data format to wide using tidyr
  pivot_wider(id_cols = species, names_from = isotope, values_from=c(mean, sd))

ggplot(penguins_example, aes(x = carbon, y = nitrogen, col = species)) +
  geom_point(alpha = 0.6)+
  geom_errorbar(data = penguins_summary_isotopes, 
                aes(x = mean_carbon, 
                    ymax = mean_nitrogen+sd_nitrogen, ymin = mean_nitrogen-sd_nitrogen, col = species),
                inherit.aes = F, width = 0.1)+
  geom_errorbar(data = penguins_summary_isotopes, 
                aes(y = mean_nitrogen, 
                    xmax = mean_carbon+sd_carbon, xmin = mean_carbon-sd_carbon, col = species), 
                inherit.aes = F, width = 0.1)+
  scale_colour_viridis_d(option = "mako", begin = 0.75, end = 0.1, name = "Species")+
  theme_minimal()+
  theme(panel.border = element_rect(fill = NA))

```


### Some useful functions

Here, I'll dig into the functions used in the above example to see how we processed the data.

#### janitor::clean_names()

Let's remind ourselves of the original data:
```{r}

glimpse(penguins_raw)

```

And now tidy up our column names into snake_case

```{r}

penguins_example <- penguins_raw %>%
  janitor::clean_names() 

glimpse(penguins_example)
```


#### dplyr::rename()

To rename a column

```{r}

penguins_example %<>%
  dplyr::rename(carbon = delta_13_c_o_oo,
         nitrogen = delta_15_n_o_oo) 

glimpse(penguins_example)
```


#### dplyr::mutate()

To add a column

```{r}

penguins_example %<>%
  mutate(year = 2007)

glimpse(penguins_example)
```



#### dplyr::mutate()

To add a column

```{r}

penguins_example %<>%
  mutate(year = "unkown")

glimpse(penguins_example)
```


#### lubridate::year()

Lubridate is great for working with dates and times. Here, we want to extract year from a column of date


```{r}
penguins_example %<>%
  mutate(year = lubridate::year(date_egg))

glimpse(penguins_example)
```



#### stringr::str_to_lower()

Change the contents of a column to lower case

```{r}
penguins_example %<>%
  mutate(sex = str_to_lower(sex))

glimpse(penguins_example)
```



#### stringr::str_to_lower()

Change the contents of a column to lower case

```{r}
penguins_example %<>%
  mutate(sex = str_to_lower(sex))

glimpse(penguins_example)
```


#### dplyr::select()

Keep certain columns


```{r}
penguins_tiny <- penguins_example %>%
  select(individual_id, sex, body_mass_g)

glimpse(penguins_tiny)
```

Remove certain columns

```{r}
penguins_tiny2 <- penguins_example %>%
  select(!c(study_name, sample_number, region, comments))

glimpse(penguins_tiny2)

```



#### dplyr::filter()

Filter the rows of a dataframe by different criteria

```{r}
#| echo = FALSE
knitr::kable(head(penguins_tiny, n = 10))
```

```{r}
penguins_tiny %<>%
  filter(!is.na(sex))
```


```{r}
#| echo = FALSE
knitr::kable(head(penguins_tiny, n = 7))
```

#### tidyr::pivot_wider()

```{r}
#| echo = FALSE
penguins_example <- penguins_raw %>%
  # column names to snake_case using janitor package
  janitor::clean_names() %>% 
  # rename columns using dplyr
  rename(carbon = delta_13_c_o_oo,
         nitrogen = delta_15_n_o_oo) %>%
  # add new columns using dplyr
  mutate(
    # extract year using lubridate
    year = lubridate::year(date_egg), 
    # change case in sex column using stringr
    sex = str_to_lower(sex), 
    # take first element of species column string using stringr and purrr
    species = str_split(species, pattern = " ") %>% map(.,1) %>% unlist()) %>% 
  # remove nas in sex column using dplyr
  filter(!is.na(sex))
```


```{r}
penguins_isotopes_tiny <- penguins_example %>% 
  select(species, individual_id, carbon, nitrogen)

```



```{r}
#| echo = FALSE
penguins_isotopes_tiny %<>%
  filter(!is.na(carbon), !is.na(nitrogen)) %>%
  group_by(species) %>%
  slice_head(n = 2) %>%
  ungroup()

knitr::kable(penguins_isotopes_tiny)
```


```{r}
penguins_isotopes_tiny %<>% 
  pivot_longer(cols = carbon:nitrogen, 
               names_to = "isotope", 
               values_to = "value") 

```
#### dplyr::group_by() & dplyr::summarise()

```{r}
#| echo = FALSE
knitr::kable(penguins_isotopes_tiny)
```

```{r}
#| message: false
penguins_isotopes_tiny %<>%
  group_by(species, isotope) %>% 
  summarize(mean = mean(value),
            sd =  sd(value)) 

```

```{r}
#| echo = FALSE
knitr::kable(penguins_isotopes_tiny)
```

#### tidyr::pivot_wider()

```{r}
#| message: false
penguins_isotopes_tiny %<>%
  pivot_wider(id_cols = species, 
              names_from = isotope, 
              values_from=c(mean, sd)) 

```

```{r}
#| echo = FALSE
knitr::kable(penguins_isotopes_tiny)
```

#### dplyr joins
```{r}
penguins_example %<>%
  left_join(penguins_summary_isotopes,
            by = join_by(species))

glimpse(penguins_example)
```

